// Generated by CoffeeScript 1.6.2
var FacilitiesListCtrl, NMISListCtrl, PairedListCtrl, RejectedListCtrl, RootCtrl, TabsCtrl;

TabsCtrl = function($scope) {
  return $scope.panes = [
    {
      title: "Health Facilities",
      content: "Health Facilities will be here",
      active: true
    }
  ];
};

RootCtrl = function($rootScope) {
  $rootScope.$on("currentFacility", function(evt, fac) {
    return $rootScope.currentFacility = fac;
  });
  $rootScope.$on("matching_request", function(evt, fac) {
    if ($rootScope.currentFacility !== undefined && fac !== undefined) {
      return $rootScope.$broadcast("pair_confirmed", [$rootScope.currentFacility, fac]);
    }
  });
  return $rootScope.$on("rejecting_request", function(evt, fac) {
    if (true) {
      return $rootScope.$broadcast("reject_confirmed", fac);
    }
  });
};

FacilitiesListCtrl = function($scope, $http) {
  var file;

  file = "docs/Aba_North_Health_Facility_List.csv";
  return $http.get(file).success(function(data, status, headers, config) {
    $scope.facilities = csv(data).toObjects();
    $scope.index = 0;
    $scope.facility = $scope.facilities[$scope.index];
    $scope._changeI = function(delta) {
      var newI;

      newI = $scope.index + delta;
      if (newI >= $scope.facilities.length) {
        newI = 0;
      } else {
        if (newI <= 0) {
          newI = $scope.facilities.length - 1;
        }
      }
      $scope.index = newI;
      $scope.facility = $scope.facilities[newI];
      return $scope.$emit("currentFacility", $scope.facility);
    };
    $scope.$emit("currentFacility", $scope.facility);
    $scope.next = function() {
      return $scope._changeI(1);
    };
    return $scope.previous = function() {
      return $scope._changeI(-1);
    };
  }).error(function(data, status, headers, config) {
    return alert(csv_addr + " is not valid file format, please check!");
  });
};

NMISListCtrl = function($scope, $http) {
  var file;

  file = "docs/Aba_North_NMIS_List.csv";
  return $http.get(file).success(function(data, status, headers, config) {
    var facilities_len;

    $scope.facilities = csv(data).toObjects();
    facilities_len = $scope.facilities.length;
    $scope.predicate = "facility_name";
    $scope.radioModel = "Name";
    $scope.sortby = function(key) {
      return $scope.facilities = _.sortBy($scope.facilities, function(fac) {
        return fac[key].toLowerCase();
      });
    };
    $scope.match = function(fac) {
      return $scope.$emit("matching_request", fac);
    };
    return $scope.fail = function(fac) {
      return $scope.$emit("rejecting_request", fac);
    };
  }).error(function(data, status, headers, config) {
    return alert(file + " is not valid file format, please check!");
  });
};

PairedListCtrl = function($scope, $rootScope, $http) {
  var file;

  file = "docs/paired_list.json";
  return $http.get(file).success(function(data, status, headers, config) {
    if (data.length === 0) {
      $scope.pairs = [];
    } else {
      $scope.pairs = JSON.parse(data);
    }
    return $scope.$on("pair_confirmed", function(evt, fac) {
      return $scope.pairs.unshift(fac);
    });
  }).error(function(data, status, headers, config) {
    return alert(file + " is not valid file format, please check!");
  });
};

RejectedListCtrl = function($scope, $rootScope, $http) {
  var file;

  file = "docs/rejected_list.json";
  $scope.oneAtATime = true;
  return $http.get(file).success(function(data, status, headers, config) {
    if (data.length === 0) {
      $scope.rejects = [];
    } else {
      $scope.rejects = JSON.parse(data);
    }
    return $scope.$on("reject_confirmed", function(evt, fac) {
      return $scope.rejects.unshift(fac);
    });
  }).error(function(data, status, headers, config) {
    return alert(file + " is not valid file format, please check!");
  });
};
